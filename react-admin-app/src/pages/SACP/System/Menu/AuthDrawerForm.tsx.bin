import { Tag, Button, Checkbox, Spin } from 'antd';
import React, { useState, useCallback, useEffect } from 'react';

import { DrawerForm, ProDescriptions } from '@ant-design/pro-components';

type IProps = {
  drawerVisit: boolean;
  roleInfo: any;
  setDrawerVisit: React.Dispatch<React.SetStateAction<boolean>>;
  setRoleInfo: React.Dispatch<any>;
  handleMsg: (msg: string) => void;
};

type RoleKey = {
  [key: string]: boolean;
};

type RBAType = {
  label: string;
  value: string;
}[];

const AuthDrawerForm = ({
  drawerVisit,
  roleInfo,
  setDrawerVisit,
  setRoleInfo,
  handleMsg
}: IProps) => {
  const [checkedState, setCheckedState] = useState({});
  const [authRBACData, setAuthRBACData] = useState<RBAType>([]);

  const handleDrawerClose = (open: boolean) => {
    if (!open) {
      setDrawerVisit(false);
      setCheckedState({});
      setRoleInfo({});
    }
  };

  const handleReset = useCallback(() => {
    // resetAuthRBACItemsReq.run();
  }, []);

  const handleBind = (e: any, value: string, roleInfo: { role?: any }) => {
    setCheckedState((prevState) => ({
      ...prevState,
      [value]: e.target.checked
    }));
    // bindAuthRoleReq.run({
    //   item: value,
    //   role: roleInfo.role
    // });
  };

  useEffect(() => {
    if (drawerVisit) {
      // getAuthRBACItemsReq.run();
    }
    if (drawerVisit && roleInfo?.role) {
      // getRBACRoleAuthReq.run({ role_id: roleInfo.role });
    }
  }, [drawerVisit, roleInfo]);

  return (
    <DrawerForm
      submitter={false}
      open={drawerVisit}
      title={'设置'}
      onOpenChange={handleDrawerClose}
      drawerProps={{
        destroyOnClose: true,
        extra: roleInfo.path ? (
          <Button
            type="primary"
            onClick={handleReset}
            style={{ marginRight: 12 }}
          >
            按钮
          </Button>
        ) : null
      }}
    >
      <ProDescriptions column={2}>
        {authRBACData.map((item) => (
            <ProDescriptions.Item key={item.value}>
              <Checkbox
                  checked={checkedState[item.value as keyof typeof checkedState]}
                  onChange={(e) => handleBind(e, item.value, roleInfo)}
              >
                <Tag color="blue">{item.label}</Tag>
              </Checkbox>
            </ProDescriptions.Item>
        ))}
      </ProDescriptions>
    </DrawerForm>
  );
};

export default AuthDrawerForm;
